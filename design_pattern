行为型模式：
	
	1.策略模式：
		完成一项任务，往往可以有多种不同的方式，每一种方式称为一个策略，我们可以根据环境或者条件的不同选择不同的策略来完成该项任务。
		（比如查找，会有单一查找，全部查找，模糊查找，精准查找等等，查找是我们的任务，每一种查找方式都是我们实现查找的策略）
		
		比如：改变theme的大小和颜色（theme有两个属性可以被修改，对于每个属性的修改肯定要执行他们各自的方法）
			1. 定义theme属性，即指明哪些属性是可以被修改的
			2. 每一个属性都是一个接口类型（每个属性都有各自的修改属性的方法）
			3. 定义接口的具体实现方式
			4. 通过使用者进行包装 （人通过参数配置，对theme进行修改）
			
		修改theme是任务，可以通过修改大小或颜色两种策略完成修改，根据需求选择需要的策略完成修改

************************************************************************************************************************
结构型模式：

	1.装饰模式：
        不改变接口和原对象的前提下,通过装饰，使原对象展现出新的样子，增强原对象的功能
        (比如milkCoffee, 往杯子中加入milk变成milkcoffee，且价钱也会变, 比如soda，往杯子中加入lemon变成lemonSoda，且价钱也会变)
        (但是原本coffee和soda并没被改变)

        decorator就像杯子，被子中有original drinks （Decorator{c}）
        milk和lemon就是具体的装饰品，将他们加入杯子中 （&lemon{Decorator{s}}）
        最后他们就会产出新产品 （m,l）
        这些新产品有新的产品描述和价钱 （m.drinksDesc(), m.drinksPrice()）

        关键在于这个decorator结构体的定义（并实现接口）， 他起到承上启下作用
        decorator通过接收一个具体装饰，对内部的对象进行修改


    2.适配器模式:
        适配器模式将一个类的接口，转换成客户期望的另一个接口
        (比如苹果手机，配备苹果充电器，安卓手机，配置安卓充电器，一天充电器坏了，就需要一个adaptor，既能冲苹果又能冲安卓)
        (这个adaptor可能还可以冲其他设备, 冲其他设备可以交给接口管理)

        当需要的方法在原有类中不存在（android接头没法冲apple air），此时就可以通过适配器，完成向下兼容并向上扩展

        此时只需要通过一个适配器，就可以完成对所有设备的充电，同时又不占用老的充电接口